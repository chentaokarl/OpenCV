/*
 * ContourDraw.cpp
 *
 *  Created on: Sep 26, 2016
 *      Author: carlchan
 */

#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/opencv.hpp"
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define PI 3.14159265
using namespace cv;
using namespace std;

Mat img_mask;

int thresh = 100;
int max_thresh = 255;
RNG rng(12345);

Mat result;
char* source_window = "Source Image";
//char* result_window = "Result window";

int match_method;
int max_Trackbar = 5;

/// Function header
void thresh_callback(Mat, Rect, int, void*);
void imageSub(string, string);
Point MatchingMethod(Mat, Mat, int, void*);
vector<Point> phoneKeyPoints(Point, Point);
string detectTempl(string, string);

/** @function main */
int main(int argc, char** argv) {

	string path1 = detectTempl("src/frame31.png", "src/template.jpg");

	string path2 = detectTempl("src/frame50.png", "src/template.jpg");

//
//	/// Create Window
//	char* source_window = "Source";
//	namedWindow(result_window, CV_WINDOW_AUTOSIZE);
//	imshow(result_window, roiImg);
//
//	createTrackbar(" Canny thresh:", "Source", &thresh, max_thresh,
//			thresh_callback);

	imageSub(path1, path2);
	std::remove(path1.c_str()); // delete file
	std::remove(path2.c_str()); // delete file

	waitKey(0);

	return (0);
}

string detectTempl(string imgPath, string templPath) {
	// Load source image and convert it to gray
	Mat sourceImg = imread(imgPath, 1);

	Mat tmpImg = imread(templPath, 1);

//	namedWindow(source_window, CV_WINDOW_AUTOSIZE);
	//	namedWindow(result_window, CV_WINDOW_AUTOSIZE);

	/// Create Trackbar
	//	char* trackbar_label =
	//			"Method: \n 0: SQDIFF \n 1: SQDIFF NORMED \n 2: TM CCORR \n 3: TM CCORR NORMED \n 4: TM COEFF \n 5: TM COEFF NORMED";
	//	createTrackbar(trackbar_label, source_window, &match_method, max_Trackbar,
	//			MatchingMethod);

	Point img1_point = MatchingMethod(sourceImg, tmpImg, 0, 0);
	Rect rect = Rect(img1_point.x, img1_point.y, tmpImg.cols, tmpImg.rows);
	Mat roiImg1;
	roiImg1 = sourceImg(rect);
	std::ostringstream pathImageWrite(std::ostringstream::ate);
	pathImageWrite << imgPath << "_roi.png";

	thresh_callback(sourceImg, rect, 0, 0);

	imwrite(pathImageWrite.str(), roiImg1);

	return pathImageWrite.str();
}

/** @function thresh_callback */
void thresh_callback(Mat sourceImg, Rect rect, int, void*) {
	Mat src_gray;
	/// Convert image to gray and blur it
	cvtColor(sourceImg, src_gray, CV_BGR2GRAY);
	blur(src_gray, src_gray, Size(3, 3));

	Mat canny_output;
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;

	/// Detect edges using canny
	Canny(src_gray, canny_output, thresh, thresh * 2, 3);
	/// Find contours
	findContours(canny_output(rect), contours, hierarchy, CV_RETR_TREE,
			CV_CHAIN_APPROX_SIMPLE, Point(0, 0));

	/// Draw contours
	Mat drawing = Mat::zeros(src_gray.size(), CV_8UC3);

	int maxContLen = 0;

	for (int i = 0; i < contours.size(); i++) {
//		for (int j = 0; j < sizeof(max) / sizeof(int); j++) {
			double tmp1 = arcLength(contours[i], true);
			double tmp2 = arcLength(contours[maxContLen], true);

			if (tmp1 > tmp2) {
				maxContLen = i;
			}
//		}
	}
//	for (int i = 0; i < sizeof(max) / sizeof(int); i++) {
		Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255),
				rng.uniform(0, 255));
//		cout<<i << color << endl;

		drawContours(drawing, contours, maxContLen, color, 1, 8, hierarchy, 0,
				Point(rect.x, rect.y));
//		drawContours(drawing, contours, max[i], color, 1, 8, hierarchy, 0,
//						Point(0, 0));

//		cout << arcLength(contours[maxContLen], true) << endl;
		int maxX = 0;
		for (int j = 0; j < contours[maxContLen].size(); j++) {

			if (j == 0) {
				cv::circle(drawing, Point(rect.x, rect.y) + contours[maxContLen][j],
						3, color);
//				Moments M = moments(contours[maxContLen]);
//				cout << contours[maxContLen][j].x << "," << contours[maxContLen][j].y
//						<< endl;

//				cv::circle(drawing, Point(rect.x, rect.y)  + Point(M.m10/M.m00 , M.m01/M.m00), 3, color);
			}
			if (contours[maxContLen][j].x > contours[maxContLen][maxX].x)
				maxX = j;

		}
		cv::circle(drawing, Point(rect.x, rect.y) + contours[maxContLen][maxX], 3,
				color);

		phoneKeyPoints(contours[maxContLen][0], contours[maxContLen][maxX]);

//		std::vector<std::vector<cv::Point> > hull(1);
//		cv::convexHull(cv::Mat(contours[max[i]]), hull[0], false);
//		cv::drawContours(drawing, hull, 0, cv::Scalar(0, 255, 0), 1);

//	}

//	for (int i = 0; i < contours.size(); i++) {
//		Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255),
//				rng.uniform(0, 255));
////		cout<<i << color << endl;
//
//		drawContours(drawing, contours, i, color, 1, 8, hierarchy, 0,Point(rect.x,rect.y));
//
//		cout<<arcLength(contours[i],true)<<endl;
//		for(int j = 0; j< contours[i].size(); j++) {
//
//			if(j==0 || j==contours[i].size()-1)
//				cv::circle(drawing,Point(rect.x,rect.y) + contours[i][j],3,color);
//		}
//	}

	/// Show in a window
	namedWindow("Contours", CV_WINDOW_AUTOSIZE);
	imshow("Contours", drawing);
}

void imageSub(string img1Path, string img2Path) {
	Mat im = imread(img1Path, 1);
	Mat im2 = imread(img2Path, 1);

	Mat dest;

	cv::subtract(im2, im, dest);
	CV_Assert(dest.depth() == CV_8U);

	int channels = dest.channels();

	int nRows = dest.rows;
	int nCols = dest.cols * channels;
	if (dest.isContinuous()) {
		nCols *= nRows;
		nRows = 1;
	}
//	cout << "size:" << nRows << endl;
	imshow("image diff", dest);
//	thresh_callback(dest, rect, 0, 0);
}

/**
 * @function MatchingMethod
 * @brief Trackbar callback
 */
Point MatchingMethod(Mat sourceImg, Mat templImg, int, void*) {

	/// Source image to display
	Mat img_display;
	sourceImg.copyTo(img_display);

	/// Create the result matrix
	int result_cols = sourceImg.cols - templImg.cols + 1;
	int result_rows = sourceImg.rows - templImg.rows + 1;

	result.create(result_rows, result_cols, CV_32FC1);

	/// Do the Matching and Normalize
	matchTemplate(sourceImg, templImg, result, match_method);
	normalize(result, result, 0, 1, NORM_MINMAX, -1, Mat());

	/// Localizing the best match with minMaxLoc
	double minVal;
	double maxVal;
	Point minLoc;
	Point maxLoc;
	Point matchLoc;

	minMaxLoc(result, &minVal, &maxVal, &minLoc, &maxLoc, Mat());

	/// For SQDIFF and SQDIFF_NORMED, the best matches are lower values. For all the other methods, the higher the better
	if (match_method == CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED) {
		matchLoc = minLoc;
	} else {
		matchLoc = maxLoc;
	}

	/// Show me what you got
	rectangle(img_display, matchLoc,
			Point(matchLoc.x + templImg.cols, matchLoc.y + templImg.rows),
			Scalar::all(0), 2, 8, 0);
	rectangle(result, matchLoc,
			Point(matchLoc.x + templImg.cols, matchLoc.y + templImg.rows),
			Scalar::all(0), 2, 8, 0);

	imshow(source_window, img_display);
//	imshow(result_window, result);
	cvWaitKey(0);

	return matchLoc;
}

vector<Point> phoneKeyPoints(Point upStart, Point upEnd){
	vector<Point> phonePointsResult;
	float tanAlpha = (upEnd.y - upStart.y)*1.0/ (upEnd.x - upStart.x);
	float alpha = atan (tanAlpha) * 180.0 / PI;
	cout<< tanAlpha<<"alpha: "<<alpha<< endl;
	cout<<"A:"<<upStart.x<<","<<upStart.y<<" B:"<<upEnd.x<<","<<upEnd.y<<endl;
	float phoneWidth = sqrt(pow((upEnd.x - upStart.x),2)+pow((upEnd.y - upStart.y),2));
	float phoneLongth = phoneWidth*16/9;
	cout<<phoneWidth<<","<<phoneLongth<<endl;

	//calc points for key number 1 , 2, 3
	float tempDist = phoneLongth*3/8;
	Point point38A(upStart.x - tempDist*sin(alpha*PI/180.0), upStart.y + tempDist*cos(alpha*PI/180.0));
	Point point38B(upEnd.x - tempDist*sin(alpha*PI/180.0), upEnd.y + tempDist*cos(alpha*PI/180.0));
	float tempXsum = point38A.x + point38B.x;
	float tempYsum = point38A.y + point38B.y;
	Point point1(tempXsum*2/9, tempYsum*2/9);
	Point point2(tempXsum/2, tempYsum/2);
	Point point3(tempXsum*7/9, tempYsum*7/9);

	//calc points for key number 4, 5, 6
	tempDist = phoneLongth/2;
	Point point48A(upStart.x - tempDist*sin(alpha*PI/180.0), upStart.y + tempDist*cos(alpha*PI/180.0));
	Point point48B(upEnd.x - tempDist*sin(alpha*PI/180.0), upEnd.y + tempDist*cos(alpha*PI/180.0));
	tempXsum = point48A.x + point48B.x;
	tempYsum = point48A.y + point48B.y;
	Point point4(tempXsum*2/9, tempYsum*2/9);
	Point point5(tempXsum/2, tempYsum/2);
	Point point6(tempXsum*7/9, tempYsum*7/9);

	//calc points for key number 7, 8, 9
	tempDist = phoneLongth*5/8;
	Point point58A(upStart.x - tempDist*sin(alpha*PI/180.0), upStart.y + tempDist*cos(alpha*PI/180.0));
	Point point58B(upEnd.x - tempDist*sin(alpha*PI/180.0), upEnd.y + tempDist*cos(alpha*PI/180.0));
	tempXsum = point58A.x + point58B.x;
	tempYsum = point58A.y + point58B.y;
	Point point7(tempXsum*2/9, tempYsum*2/9);
	Point point8(tempXsum/2, tempYsum/2);
	Point point9(tempXsum*7/9, tempYsum*7/9);

	//calc points for key number 7, 8, 9
	tempDist = phoneLongth*6/8;
	Point point68A(upStart.x - tempDist*sin(alpha*PI/180.0), upStart.y + tempDist*cos(alpha*PI/180.0));
	Point point68B(upEnd.x - tempDist*sin(alpha*PI/180.0), upEnd.y + tempDist*cos(alpha*PI/180.0));
	tempXsum = point68A.x + point68B.x;
	tempYsum = point68A.y + point68B.y;
	Point point0(tempXsum/2, tempYsum/2);

	phonePointsResult.push_back(point38A);
	phonePointsResult.push_back(point38B);
	phonePointsResult.push_back(point1);
	phonePointsResult.push_back(point2);
	phonePointsResult.push_back(point3);
	phonePointsResult.push_back(point48A);
	phonePointsResult.push_back(point48B);
	phonePointsResult.push_back(point4);
	phonePointsResult.push_back(point5);
	phonePointsResult.push_back(point6);
	phonePointsResult.push_back(point58A);
	phonePointsResult.push_back(point58B);
	phonePointsResult.push_back(point7);
	phonePointsResult.push_back(point8);
	phonePointsResult.push_back(point9);
	phonePointsResult.push_back(point68A);
	phonePointsResult.push_back(point68B);
	phonePointsResult.push_back(point0);

	return phonePointsResult;
}

